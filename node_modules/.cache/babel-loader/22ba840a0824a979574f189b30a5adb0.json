{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport CardSearch from './pages/cardSearch';\nimport Planechase from './pages/planechase';\nimport BattleCounter from './pages/battleCounter';\nimport converText from './utilities/symbolSwitch';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      planechaseState: {\n        planeSearchUrl: \"https://api.scryfall.com/cards/search?q=t=plane\",\n        allPlaneCards: [],\n        gameDeck: [],\n        currentCardIdx: 1,\n        gameGoing: false\n      },\n      cardSearchState: {\n        inputValueCardName: '',\n        autocompleteUrl: 'https://api.scryfall.com/cards/autocomplete?q=',\n        fuzzyUrl: 'https://api.scryfall.com/cards/named?fuzzy=',\n        cardList: [],\n        selectedCard: {},\n        selectedMana: [],\n        badSearch: false,\n        modalState: false\n      },\n      battleCounterState: {\n        players: []\n      } // Card Search Functions \n\n    };\n    _this.removeModal = _this.removeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSearch = _this.handleSearch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleSearchModal = _this.toggleSearchModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSearchInputChange = _this.handleSearchInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Planechase Functions\n\n    _this.addAll = _this.addAll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.endGame = _this.endGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.nextCard = _this.nextCard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeAll = _this.removeAll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.startGame = _this.startGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.findAllPlaneCards = _this.findAllPlaneCards.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addToPlanechaseDeck = _this.addToPlanechaseDeck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeCardFromGameDeck = _this.removeCardFromGameDeck.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Battle Counter Functions\n\n    _this.addPlayer = _this.addPlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeAllPlayers = _this.removeAllPlayers.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Card Search Functions \n\n\n  _createClass(App, [{\n    key: \"handleSearchInputChange\",\n    value: function handleSearchInputChange(event) {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.inputValueCardName = event.target.value;\n      cardSearchState.badSearch = false;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    }\n  }, {\n    key: \"handleSearch\",\n    value: function handleSearch(event) {\n      var cardSearchState = this.state.cardSearchState,\n          searchAutoUrl = cardSearchState.autocompleteUrl,\n          searchFuzzyUrl = cardSearchState.fuzzyUrl,\n          self = this; // Reset card list\n\n      cardSearchState.cardList = [];\n\n      if (cardSearchState.inputValueCardName.length > 0) {\n        searchAutoUrl = searchAutoUrl + cardSearchState.inputValueCardName.split(' ').join('+'); // First axios search to find all the cards with that name\n\n        axios.get(searchAutoUrl).then(function (response) {\n          var autocompleteName = response.data.data;\n\n          if (response.data.data.length > 0) {\n            toast.success(\"😎 Found something!\"); // If there are cards in the list\n            // For each card returned, it will search for that card          \n\n            var urlsToSearch = autocompleteName.map(function (name) {\n              return searchFuzzyUrl + name.split(' ').join('+');\n            });\n            urlsToSearch.forEach(function (url) {\n              return axios.get(url).then(function (response) {\n                cardSearchState.cardList.push(response.data);\n                cardSearchState.badSearch = false;\n                self.setState({\n                  cardSearchState: cardSearchState\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n            });\n          } else {\n            toast.error(\"😭 Found nothing \");\n            cardSearchState.cardList = [];\n            cardSearchState.badSearch = true;\n            self.setState({\n              cardSearchState: cardSearchState\n            });\n            console.log(\"No Similar Cards\");\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        toast.error(\"😭 Found nothing \");\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"toggleSearchModal\",\n    value: function toggleSearchModal(card) {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.selectedCard = card;\n      cardSearchState.selectedMana = converText(card.mana_cost);\n      cardSearchState.modalState = !cardSearchState.modalState;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    }\n  }, {\n    key: \"removeModal\",\n    value: function removeModal() {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.selectedCard = {};\n      cardSearchState.selectedMana = [];\n      cardSearchState.modalState = !cardSearchState.modalState;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    } // Planchase Functions\n\n  }, {\n    key: \"findAllPlaneCards\",\n    value: function findAllPlaneCards(props) {\n      var planechaseState = this.state.planechaseState,\n          self = this;\n\n      if (planechaseState.allPlaneCards.length === 0) {\n        axios.get(planechaseState.planeSearchUrl).then(function (response) {\n          planechaseState.allPlaneCards = response.data.data;\n          self.setState({\n            planechaseState: planechaseState\n          });\n          console.log(response.data.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"addToPlanechaseDeck\",\n    value: function addToPlanechaseDeck(card, idx) {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.push(card);\n      toast.info(\"👌 \" + card.name + \" added to deck (\" + planechaseState.gameDeck.length + \" in Deck)\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n      console.log(card.name, idx);\n    }\n  }, {\n    key: \"addAll\",\n    value: function addAll() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck = planechaseState.gameDeck.concat(planechaseState.allPlaneCards);\n      toast.info(\"🔥 ALL CARDS ADDED (\" + planechaseState.gameDeck.length + \" in Deck) 🔥\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck = [];\n      toast.info(\"💀 ALL CARDS REMOVED 💀\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"removeCardFromGameDeck\",\n    value: function removeCardFromGameDeck(card, idx) {\n      // remove specific card based on the index of the card in the deck\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.splice(idx, 1);\n      toast.info(\"💀 \" + card.name + \" removed from deck (\" + planechaseState.gameDeck.length + \" in Deck)\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      var planechaseState = this.state.planechaseState;\n\n      function shuffle(deck) {\n        for (var i = deck.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var _ref = [deck[j], deck[i]];\n          deck[i] = _ref[0];\n          deck[j] = _ref[1];\n        }\n\n        return deck;\n      }\n\n      if (planechaseState.gameDeck.length > 0) {\n        planechaseState.gameDeck = shuffle(planechaseState.gameDeck);\n        planechaseState.gameGoing = true;\n      } else {\n        toast.info(\"You need to add some cards first!\");\n      }\n\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"nextCard\",\n    value: function nextCard() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.push(planechaseState.gameDeck.shift());\n      planechaseState.currentCardIdx++;\n\n      function shuffle(deck) {\n        for (var i = deck.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var _ref2 = [deck[j], deck[i]];\n          deck[i] = _ref2[0];\n          deck[j] = _ref2[1];\n        }\n\n        return deck;\n      }\n\n      if (planechaseState.currentCardIdx === planechaseState.gameDeck.length) {\n        shuffle(planechaseState.gameDeck);\n        toast.info(\"Deck shuffled!\");\n        planechaseState.currentCardIdx = 1;\n      }\n\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"endGame\",\n    value: function endGame() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameGoing = false;\n      planechaseState.currentCardIdx = 1;\n      this.setState({\n        planechaseState: planechaseState\n      });\n    } // Battle Counter Functions \n\n  }, {\n    key: \"addPlayer\",\n    value: function addPlayer() {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players.push([20]);\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"removeAllPlayers\",\n    value: function removeAllPlayers() {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players = [];\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"addCounter\",\n    value: function addCounter(idx) {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players[idx].push(0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), this.findAllPlaneCards(), React.createElement(ToastContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(BattleCounter, {\n        battleCounterState: this.state.battleCounterState,\n        addPlayer: this.addPlayer,\n        removeAllPlayers: this.removeAllPlayers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Mario.Baez\\Documents\\code\\personal\\battlesphere\\src\\App.js"],"names":["React","Component","CardSearch","Planechase","BattleCounter","converText","axios","ToastContainer","toast","App","props","state","planechaseState","planeSearchUrl","allPlaneCards","gameDeck","currentCardIdx","gameGoing","cardSearchState","inputValueCardName","autocompleteUrl","fuzzyUrl","cardList","selectedCard","selectedMana","badSearch","modalState","battleCounterState","players","removeModal","bind","handleSearch","toggleSearchModal","handleSearchInputChange","addAll","endGame","nextCard","removeAll","startGame","findAllPlaneCards","addToPlanechaseDeck","removeCardFromGameDeck","addPlayer","removeAllPlayers","event","target","value","setState","searchAutoUrl","searchFuzzyUrl","self","length","split","join","get","then","response","autocompleteName","data","success","urlsToSearch","map","name","forEach","url","push","catch","error","console","log","preventDefault","card","mana_cost","idx","info","concat","splice","shuffle","deck","i","j","Math","floor","random","shift"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AAEA,OAAO,uCAAP;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;;IAEMC,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AACfC,QAAAA,cAAc,EAAE,iDADD;AAEfC,QAAAA,aAAa,EAAE,EAFA;AAGfC,QAAAA,QAAQ,EAAE,EAHK;AAIfC,QAAAA,cAAc,EAAE,CAJD;AAKfC,QAAAA,SAAS,EAAE;AALI,OADN;AASXC,MAAAA,eAAe,EAAE;AACfC,QAAAA,kBAAkB,EAAE,EADL;AAEfC,QAAAA,eAAe,EAAE,gDAFF;AAGfC,QAAAA,QAAQ,EAAE,6CAHK;AAIfC,QAAAA,QAAQ,EAAE,EAJK;AAKfC,QAAAA,YAAY,EAAE,EALC;AAMfC,QAAAA,YAAY,EAAE,EANC;AAOfC,QAAAA,SAAS,EAAE,KAPI;AAQfC,QAAAA,UAAU,EAAE;AARG,OATN;AAmBXC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,OAAO,EAAE;AADS,OAnBT,CAyBb;;AAzBa,KAAb;AA0BA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AACA,UAAKE,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBF,IAAvB,uDAAzB;AACA,UAAKG,uBAAL,GAA+B,MAAKA,uBAAL,CAA6BH,IAA7B,uDAA/B,CA/BiB,CAiCjB;;AACA,UAAKI,MAAL,GAAc,MAAKA,MAAL,CAAYJ,IAAZ,uDAAd;AACA,UAAKK,OAAL,GAAe,MAAKA,OAAL,CAAaL,IAAb,uDAAf;AACA,UAAKM,QAAL,GAAgB,MAAKA,QAAL,CAAcN,IAAd,uDAAhB;AACA,UAAKO,SAAL,GAAiB,MAAKA,SAAL,CAAeP,IAAf,uDAAjB;AACA,UAAKQ,SAAL,GAAiB,MAAKA,SAAL,CAAeR,IAAf,uDAAjB;AACA,UAAKS,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBT,IAAvB,uDAAzB;AACA,UAAKU,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBV,IAAzB,uDAA3B;AACA,UAAKW,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BX,IAA5B,uDAA9B,CAzCiB,CA2CjB;;AACA,UAAKY,SAAL,GAAiB,MAAKA,SAAL,CAAeZ,IAAf,uDAAjB;AACA,UAAKa,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBb,IAAtB,uDAAxB;AA7CiB;AA8ClB,G,CAGD;;;;;4CACwBc,K,EAAO;AAC7B,UAAI1B,eAAe,GAAG,KAAKP,KAAL,CAAWO,eAAjC;AACAA,MAAAA,eAAe,CAACC,kBAAhB,GAAqCyB,KAAK,CAACC,MAAN,CAAaC,KAAlD;AACA5B,MAAAA,eAAe,CAACO,SAAhB,GAA4B,KAA5B;AACA,WAAKsB,QAAL,CAAc;AAAE7B,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;iCACY0B,K,EAAO;AAClB,UAAI1B,eAAe,GAAG,KAAKP,KAAL,CAAWO,eAAjC;AAAA,UACE8B,aAAa,GAAG9B,eAAe,CAACE,eADlC;AAAA,UAEE6B,cAAc,GAAG/B,eAAe,CAACG,QAFnC;AAAA,UAGE6B,IAAI,GAAG,IAHT,CADkB,CAKlB;;AACAhC,MAAAA,eAAe,CAACI,QAAhB,GAA2B,EAA3B;;AACA,UAAIJ,eAAe,CAACC,kBAAhB,CAAmCgC,MAAnC,GAA4C,CAAhD,EAAmD;AACjDH,QAAAA,aAAa,GAAGA,aAAa,GAAG9B,eAAe,CAACC,kBAAhB,CAAmCiC,KAAnC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD,GAAnD,CAAhC,CADiD,CAEjD;;AACA/C,QAAAA,KAAK,CAACgD,GAAN,CAAUN,aAAV,EACGO,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,cAAIC,gBAAgB,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAArC;;AACA,cAAIF,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBP,MAAnB,GAA4B,CAAhC,EAAmC;AACjC3C,YAAAA,KAAK,CAACmD,OAAN,CAAc,qBAAd,EADiC,CAEjC;AACA;;AACA,gBAAIC,YAAY,GAAGH,gBAAgB,CAACI,GAAjB,CAAqB,UAAAC,IAAI;AAAA,qBAAIb,cAAc,GAAGa,IAAI,CAACV,KAAL,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,GAArB,CAArB;AAAA,aAAzB,CAAnB;AACAO,YAAAA,YAAY,CAACG,OAAb,CAAqB,UAAAC,GAAG;AAAA,qBACtB1D,KAAK,CAACgD,GAAN,CAAUU,GAAV,EACGT,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxBtC,gBAAAA,eAAe,CAACI,QAAhB,CAAyB2C,IAAzB,CAA8BT,QAAQ,CAACE,IAAvC;AACAxC,gBAAAA,eAAe,CAACO,SAAhB,GAA4B,KAA5B;AACAyB,gBAAAA,IAAI,CAACH,QAAL,CAAc;AAAE7B,kBAAAA,eAAe,EAAEA;AAAnB,iBAAd;AACD,eALH,EAKKgD,KALL,CAKW,UAAUC,KAAV,EAAiB;AACxBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eAPH,CADsB;AAAA,aAAxB;AASD,WAdD,MAcO;AACL3D,YAAAA,KAAK,CAAC2D,KAAN,CAAY,mBAAZ;AAEAjD,YAAAA,eAAe,CAACI,QAAhB,GAA2B,EAA3B;AACAJ,YAAAA,eAAe,CAACO,SAAhB,GAA4B,IAA5B;AACAyB,YAAAA,IAAI,CAACH,QAAL,CAAc;AAAE7B,cAAAA,eAAe,EAAEA;AAAnB,aAAd;AACAkD,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,SAzBH,EA0BGH,KA1BH,CA0BS,UAAUC,KAAV,EAAiB;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,SA5BH;AA6BD,OAhCD,MAgCO;AACL3D,QAAAA,KAAK,CAAC2D,KAAN,CAAY,mBAAZ;AACD;;AACDvB,MAAAA,KAAK,CAAC0B,cAAN;AACD;;;sCACiBC,I,EAAM;AACtB,UAAIrD,eAAe,GAAG,KAAKP,KAAL,CAAWO,eAAjC;AACAA,MAAAA,eAAe,CAACK,YAAhB,GAA+BgD,IAA/B;AACArD,MAAAA,eAAe,CAACM,YAAhB,GAA+BnB,UAAU,CAACkE,IAAI,CAACC,SAAN,CAAzC;AACAtD,MAAAA,eAAe,CAACQ,UAAhB,GAA6B,CAACR,eAAe,CAACQ,UAA9C;AACA,WAAKqB,QAAL,CAAc;AAAE7B,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;kCACa;AACZ,UAAIA,eAAe,GAAG,KAAKP,KAAL,CAAWO,eAAjC;AACAA,MAAAA,eAAe,CAACK,YAAhB,GAA+B,EAA/B;AACAL,MAAAA,eAAe,CAACM,YAAhB,GAA+B,EAA/B;AACAN,MAAAA,eAAe,CAACQ,UAAhB,GAA6B,CAACR,eAAe,CAACQ,UAA9C;AACA,WAAKqB,QAAL,CAAc;AAAE7B,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,K,CAED;;;;sCACkBR,K,EAAO;AACvB,UAAIE,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AAAA,UACEsC,IAAI,GAAG,IADT;;AAEA,UAAItC,eAAe,CAACE,aAAhB,CAA8BqC,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C7C,QAAAA,KAAK,CAACgD,GAAN,CAAU1C,eAAe,CAACC,cAA1B,EACG0C,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB5C,UAAAA,eAAe,CAACE,aAAhB,GAAgC0C,QAAQ,CAACE,IAAT,CAAcA,IAA9C;AACAR,UAAAA,IAAI,CAACH,QAAL,CAAc;AAAEnC,YAAAA,eAAe,EAAEA;AAAnB,WAAd;AACAwD,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACE,IAAT,CAAcA,IAA1B;AACD,SALH,EAMGQ,KANH,CAMS,UAAUC,KAAV,EAAiB;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,SARH;AASD;AAEF;;;wCACmBI,I,EAAME,G,EAAK;AAC7B,UAAI7D,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyBkD,IAAzB,CAA8BM,IAA9B;AACA/D,MAAAA,KAAK,CAACkE,IAAN,CAAW,QAAQH,IAAI,CAACT,IAAb,GAAoB,kBAApB,GAAyClD,eAAe,CAACG,QAAhB,CAAyBoC,MAAlE,GAA2E,WAAtF;AACA,WAAKJ,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACAwD,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACT,IAAjB,EAAuBW,GAAvB;AACD;;;6BACQ;AACP,UAAI7D,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,GAA2BH,eAAe,CAACG,QAAhB,CAAyB4D,MAAzB,CAAgC/D,eAAe,CAACE,aAAhD,CAA3B;AACAN,MAAAA,KAAK,CAACkE,IAAN,CAAW,yBAAyB9D,eAAe,CAACG,QAAhB,CAAyBoC,MAAlD,GAA2D,cAAtE;AACA,WAAKJ,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;gCACW;AACV,UAAIA,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,GAA2B,EAA3B;AACAP,MAAAA,KAAK,CAACkE,IAAN,CAAW,yBAAX;AACA,WAAK3B,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;2CACsB2D,I,EAAME,G,EAAK;AAChC;AACA,UAAI7D,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyB6D,MAAzB,CAAgCH,GAAhC,EAAqC,CAArC;AACAjE,MAAAA,KAAK,CAACkE,IAAN,CAAW,QAAQH,IAAI,CAACT,IAAb,GAAoB,sBAApB,GAA6ClD,eAAe,CAACG,QAAhB,CAAyBoC,MAAtE,GAA+E,WAA1F;AAEA,WAAKJ,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAED;;;gCACW;AACV,UAAIA,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;;AACA,eAASiE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAK,IAAIC,CAAC,GAAGD,IAAI,CAAC3B,MAAL,GAAc,CAA3B,EAA8B4B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,cAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AADwC,qBAEnB,CAACD,IAAI,CAACE,CAAD,CAAL,EAAUF,IAAI,CAACC,CAAD,CAAd,CAFmB;AAEvCD,UAAAA,IAAI,CAACC,CAAD,CAFmC;AAE9BD,UAAAA,IAAI,CAACE,CAAD,CAF0B;AAGzC;;AACD,eAAOF,IAAP;AACD;;AACD,UAAIlE,eAAe,CAACG,QAAhB,CAAyBoC,MAAzB,GAAkC,CAAtC,EAAyC;AACvCvC,QAAAA,eAAe,CAACG,QAAhB,GAA2B8D,OAAO,CAACjE,eAAe,CAACG,QAAjB,CAAlC;AACAH,QAAAA,eAAe,CAACK,SAAhB,GAA4B,IAA5B;AACD,OAHD,MAGO;AACLT,QAAAA,KAAK,CAACkE,IAAN,CAAW,mCAAX;AAED;;AACD,WAAK3B,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAED;;;+BACU;AACT,UAAIA,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyBkD,IAAzB,CAA8BrD,eAAe,CAACG,QAAhB,CAAyBqE,KAAzB,EAA9B;AACAxE,MAAAA,eAAe,CAACI,cAAhB;;AACA,eAAS6D,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAK,IAAIC,CAAC,GAAGD,IAAI,CAAC3B,MAAL,GAAc,CAA3B,EAA8B4B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,cAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AADwC,sBAEnB,CAACD,IAAI,CAACE,CAAD,CAAL,EAAUF,IAAI,CAACC,CAAD,CAAd,CAFmB;AAEvCD,UAAAA,IAAI,CAACC,CAAD,CAFmC;AAE9BD,UAAAA,IAAI,CAACE,CAAD,CAF0B;AAGzC;;AACD,eAAOF,IAAP;AACD;;AACD,UAAIlE,eAAe,CAACI,cAAhB,KAAmCJ,eAAe,CAACG,QAAhB,CAAyBoC,MAAhE,EAAwE;AACtE0B,QAAAA,OAAO,CAACjE,eAAe,CAACG,QAAjB,CAAP;AACAP,QAAAA,KAAK,CAACkE,IAAN,CAAW,gBAAX;AAEA9D,QAAAA,eAAe,CAACI,cAAhB,GAAiC,CAAjC;AACD;;AACD,WAAK+B,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAGD;;;8BACS;AACR,UAAIA,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACAA,MAAAA,eAAe,CAACK,SAAhB,GAA4B,KAA5B;AACAL,MAAAA,eAAe,CAACI,cAAhB,GAAiC,CAAjC;AACA,WAAK+B,QAAL,CAAc;AAAEnC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,K,CAED;;;;gCACY;AACV,UAAIe,kBAAkB,GAAG,KAAKhB,KAAL,CAAWgB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2BqC,IAA3B,CAAgC,CAAC,EAAD,CAAhC;AACA,WAAKlB,QAAL,CAAc;AAAEpB,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AACD;;;uCACkB;AACjB,UAAIA,kBAAkB,GAAG,KAAKhB,KAAL,CAAWgB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,GAA6B,EAA7B;AACA,WAAKmB,QAAL,CAAc;AAAEpB,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AACD;;;+BACU8C,G,EAAK;AACd,UAAI9C,kBAAkB,GAAG,KAAKhB,KAAL,CAAWgB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2B6C,GAA3B,EAAgCR,IAAhC,CAAqC,CAArC;AAED;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGG,KAAK1B,iBAAL,EAHH,EAIE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAOE,oBAAC,aAAD;AAAe,QAAA,kBAAkB,EAAE,KAAK5B,KAAL,CAAWgB,kBAA9C;AAAkE,QAAA,SAAS,EAAE,KAAKe,SAAlF;AAA6F,QAAA,gBAAgB,EAAE,KAAKC,gBAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CADF;AAWD;;;;EA9Oe1C,S;;AAiPlB,eAAeQ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport CardSearch from './pages/cardSearch';\nimport Planechase from './pages/planechase';\nimport BattleCounter from './pages/battleCounter';\nimport converText from './utilities/symbolSwitch';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      planechaseState: {\n        planeSearchUrl: \"https://api.scryfall.com/cards/search?q=t=plane\",\n        allPlaneCards: [],\n        gameDeck: [],\n        currentCardIdx: 1,\n        gameGoing: false,\n\n      },\n      cardSearchState: {\n        inputValueCardName: '',\n        autocompleteUrl: 'https://api.scryfall.com/cards/autocomplete?q=',\n        fuzzyUrl: 'https://api.scryfall.com/cards/named?fuzzy=',\n        cardList: [],\n        selectedCard: {},\n        selectedMana: [],\n        badSearch: false,\n        modalState: false,\n      },\n      battleCounterState: {\n        players: [],\n\n      }\n    }\n\n    // Card Search Functions \n    this.removeModal = this.removeModal.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.toggleSearchModal = this.toggleSearchModal.bind(this);\n    this.handleSearchInputChange = this.handleSearchInputChange.bind(this);\n\n    // Planechase Functions\n    this.addAll = this.addAll.bind(this);\n    this.endGame = this.endGame.bind(this);\n    this.nextCard = this.nextCard.bind(this);\n    this.removeAll = this.removeAll.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.findAllPlaneCards = this.findAllPlaneCards.bind(this);\n    this.addToPlanechaseDeck = this.addToPlanechaseDeck.bind(this);\n    this.removeCardFromGameDeck = this.removeCardFromGameDeck.bind(this);\n\n    // Battle Counter Functions\n    this.addPlayer = this.addPlayer.bind(this);\n    this.removeAllPlayers = this.removeAllPlayers.bind(this);\n  }\n\n\n  // Card Search Functions \n  handleSearchInputChange(event) {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.inputValueCardName = event.target.value;\n    cardSearchState.badSearch = false;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n  handleSearch(event) {\n    let cardSearchState = this.state.cardSearchState,\n      searchAutoUrl = cardSearchState.autocompleteUrl,\n      searchFuzzyUrl = cardSearchState.fuzzyUrl,\n      self = this;\n    // Reset card list\n    cardSearchState.cardList = [];\n    if (cardSearchState.inputValueCardName.length > 0) {\n      searchAutoUrl = searchAutoUrl + cardSearchState.inputValueCardName.split(' ').join('+');\n      // First axios search to find all the cards with that name\n      axios.get(searchAutoUrl)\n        .then(function (response) {\n          let autocompleteName = response.data.data;\n          if (response.data.data.length > 0) {\n            toast.success(\"😎 Found something!\")\n            // If there are cards in the list\n            // For each card returned, it will search for that card          \n            let urlsToSearch = autocompleteName.map(name => searchFuzzyUrl + name.split(' ').join('+'));\n            urlsToSearch.forEach(url =>\n              axios.get(url)\n                .then(function (response) {\n                  cardSearchState.cardList.push(response.data)\n                  cardSearchState.badSearch = false;\n                  self.setState({ cardSearchState: cardSearchState })\n                }).catch(function (error) {\n                  console.log(error);\n                }))\n          } else {\n            toast.error(\"😭 Found nothing \")\n\n            cardSearchState.cardList = [];\n            cardSearchState.badSearch = true;\n            self.setState({ cardSearchState: cardSearchState })\n            console.log(\"No Similar Cards\")\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } else {\n      toast.error(\"😭 Found nothing \")\n    }\n    event.preventDefault();\n  }\n  toggleSearchModal(card) {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.selectedCard = card\n    cardSearchState.selectedMana = converText(card.mana_cost)\n    cardSearchState.modalState = !cardSearchState.modalState;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n  removeModal() {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.selectedCard = {};\n    cardSearchState.selectedMana = [];\n    cardSearchState.modalState = !cardSearchState.modalState;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n\n  // Planchase Functions\n  findAllPlaneCards(props) {\n    let planechaseState = this.state.planechaseState,\n      self = this;\n    if (planechaseState.allPlaneCards.length === 0) {\n      axios.get(planechaseState.planeSearchUrl)\n        .then(function (response) {\n          planechaseState.allPlaneCards = response.data.data\n          self.setState({ planechaseState: planechaseState })\n          console.log(response.data.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n  }\n  addToPlanechaseDeck(card, idx) {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.push(card)\n    toast.info(\"👌 \" + card.name + \" added to deck (\" + planechaseState.gameDeck.length + \" in Deck)\")\n    this.setState({ planechaseState: planechaseState })\n    console.log(card.name, idx)\n  }\n  addAll() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck = planechaseState.gameDeck.concat(planechaseState.allPlaneCards)\n    toast.info(\"🔥 ALL CARDS ADDED (\" + planechaseState.gameDeck.length + \" in Deck) 🔥\")\n    this.setState({ planechaseState: planechaseState })\n  }\n  removeAll() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck = [];\n    toast.info(\"💀 ALL CARDS REMOVED 💀\");\n    this.setState({ planechaseState: planechaseState })\n  }\n  removeCardFromGameDeck(card, idx) {\n    // remove specific card based on the index of the card in the deck\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.splice(idx, 1)\n    toast.info(\"💀 \" + card.name + \" removed from deck (\" + planechaseState.gameDeck.length + \" in Deck)\")\n\n    this.setState({ planechaseState: planechaseState })\n\n  }\n  startGame() {\n    let planechaseState = this.state.planechaseState;\n    function shuffle(deck) {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    }\n    if (planechaseState.gameDeck.length > 0) {\n      planechaseState.gameDeck = shuffle(planechaseState.gameDeck);\n      planechaseState.gameGoing = true;\n    } else {\n      toast.info(\"You need to add some cards first!\")\n\n    }\n    this.setState({ planechaseState: planechaseState })\n\n  }\n  nextCard() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.push(planechaseState.gameDeck.shift());\n    planechaseState.currentCardIdx++;\n    function shuffle(deck) {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    }\n    if (planechaseState.currentCardIdx === planechaseState.gameDeck.length) {\n      shuffle(planechaseState.gameDeck);\n      toast.info(\"Deck shuffled!\")\n\n      planechaseState.currentCardIdx = 1;\n    }\n    this.setState({ planechaseState: planechaseState });\n\n\n  }\n  endGame() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameGoing = false;\n    planechaseState.currentCardIdx = 1;\n    this.setState({ planechaseState: planechaseState });\n  }\n\n  // Battle Counter Functions \n  addPlayer() {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players.push([20])\n    this.setState({ battleCounterState: battleCounterState })\n  }\n  removeAllPlayers() {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players = [];\n    this.setState({ battleCounterState: battleCounterState })\n  }\n  addCounter(idx) {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players[idx].push(0)\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        {this.findAllPlaneCards()}\n        <ToastContainer />\n        {/* <CardSearch handleSearchInputChange={this.handleSearchInputChange} handleSearch={this.handleSearch} cardSearchState={this.state.cardSearchState} toggleSearchModal={this.toggleSearchModal} removeModal={this.removeModal} /> */}\n        {/* <Planechase planechaseState={this.state.planechaseState} addToPlanechaseDeck={this.addToPlanechaseDeck} addAll={this.addAll} removeAll={this.removeAll} removeCardFromGameDeck={this.removeCardFromGameDeck} startGame={this.startGame} nextCard={this.nextCard} endGame={this.endGame} /> */}\n        <BattleCounter battleCounterState={this.state.battleCounterState} addPlayer={this.addPlayer} removeAllPlayers={this.removeAllPlayers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
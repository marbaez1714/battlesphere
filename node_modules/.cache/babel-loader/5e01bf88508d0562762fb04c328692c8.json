{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mario.Baez\\\\Documents\\\\code\\\\personal\\\\battlesphere\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport Home from './pages/home';\nimport CardSearch from './pages/cardSearch';\nimport Planechase from './pages/planechase';\nimport BattleCounter from './pages/battleCounter';\nimport SetSearch from './pages/setSearch';\nimport converText from './utilities/symbolSwitch';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      pageView: 1,\n      planechaseState: {\n        planeSearchUrl: \"https://api.scryfall.com/cards/search?q=t=plane\",\n        allPlaneCards: [],\n        gameDeck: [],\n        currentCardIdx: 1,\n        gameGoing: false\n      },\n      cardSearchState: {\n        inputValueCardName: '',\n        autocompleteUrl: 'https://api.scryfall.com/cards/autocomplete?q=',\n        fuzzyUrl: 'https://api.scryfall.com/cards/named?fuzzy=',\n        searchUrl: \"https://api.scryfall.com/cards/search?q=\",\n        cardList: [],\n        selectedCard: {},\n        selectedMana: [],\n        badSearch: false,\n        modalState: false\n      },\n      battleCounterState: {\n        players: []\n      },\n      setSearchState: {\n        allSets: [],\n        setSearchUrl: 'https://api.scryfall.com/sets',\n        selectedSet: {},\n        showSet: false,\n        setData: []\n      } // Home Page Functions\n\n    };\n    _this.changePage = _this.changePage.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Card Search Functions \n\n    _this.removeModal = _this.removeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleSearchModal = _this.toggleSearchModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSearchInputChange = _this.handleSearchInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewSearch = _this.handleNewSearch.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Planechase Functions\n\n    _this.addAll = _this.addAll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.endGame = _this.endGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.nextCard = _this.nextCard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeAll = _this.removeAll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.startGame = _this.startGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.findAllPlaneCards = _this.findAllPlaneCards.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addToPlanechaseDeck = _this.addToPlanechaseDeck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeCardFromGameDeck = _this.removeCardFromGameDeck.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Battle Counter Functions\n\n    _this.addPlayer = _this.addPlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeAllPlayers = _this.removeAllPlayers.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addCounter = _this.addCounter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.plusOne = _this.plusOne.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.minusOne = _this.minusOne.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Set Search Functions\n\n    _this.findAllSets = _this.findAllSets.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectSet = _this.selectSet.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setSearch = _this.setSearch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Home Page Functions\n\n\n  _createClass(App, [{\n    key: \"changePage\",\n    value: function changePage(index) {\n      this.setState({\n        pageView: index\n      });\n    } // Card Search Functions \n\n  }, {\n    key: \"handleSearchInputChange\",\n    value: function handleSearchInputChange(event) {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.inputValueCardName = event.target.value;\n      cardSearchState.badSearch = false;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    }\n  }, {\n    key: \"handleNewSearch\",\n    value: function handleNewSearch(event) {\n      var cardSearchState = this.state.cardSearchState,\n          searchUrl = cardSearchState.searchUrl,\n          self = this;\n      cardSearchState.cardList = []; // only search if there is a value in the search field\n\n      if (cardSearchState.inputValueCardName.length > 0) {\n        // create the search url\n        searchUrl = searchUrl + cardSearchState.inputValueCardName.split(' ').join('+'); // create axios request\n\n        axios.get(searchUrl).then(function (response) {\n          var searchData = response.data.data; // if the response ha something in it\n\n          if (searchData.length > 0) {\n            toast.success(\"ðŸ˜Ž Found something!\");\n            searchData.forEach(function (card) {\n              if (card.image_uris) {\n                cardSearchState.cardList.push(card);\n                cardSearchState.badSearch = false;\n                self.setState({\n                  cardSearchState: cardSearchState\n                });\n              } else {\n                console.log(card.name + \"ommited from results because of an error\");\n              }\n            });\n          } else {\n            toast.error(\"ðŸ˜­ Found nothing \");\n            cardSearchState.cardList = [];\n            cardSearchState.badSearch = true;\n            self.setState({\n              cardSearchState: cardSearchState\n            });\n            console.log(\"No Similar Cards\");\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        toast.error(\"ðŸ˜­ Found nothing \");\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"toggleSearchModal\",\n    value: function toggleSearchModal(card) {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.selectedCard = card;\n      cardSearchState.selectedMana = converText(card.mana_cost);\n      cardSearchState.modalState = !cardSearchState.modalState;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    }\n  }, {\n    key: \"removeModal\",\n    value: function removeModal() {\n      var cardSearchState = this.state.cardSearchState;\n      cardSearchState.selectedCard = {};\n      cardSearchState.selectedMana = [];\n      cardSearchState.modalState = !cardSearchState.modalState;\n      this.setState({\n        cardSearchState: cardSearchState\n      });\n    } // Planchase Functions\n\n  }, {\n    key: \"findAllPlaneCards\",\n    value: function findAllPlaneCards(props) {\n      var planechaseState = this.state.planechaseState,\n          self = this;\n\n      if (planechaseState.allPlaneCards.length === 0) {\n        axios.get(planechaseState.planeSearchUrl).then(function (response) {\n          planechaseState.allPlaneCards = response.data.data;\n          self.setState({\n            planechaseState: planechaseState\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"addToPlanechaseDeck\",\n    value: function addToPlanechaseDeck(card, idx) {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.push(card);\n      toast.info(\"ðŸ‘Œ \" + card.name + \" added to deck (\" + planechaseState.gameDeck.length + \" in Deck)\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"addAll\",\n    value: function addAll() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck = planechaseState.gameDeck.concat(planechaseState.allPlaneCards);\n      toast.info(\"ðŸ”¥ ALL CARDS ADDED (\" + planechaseState.gameDeck.length + \" in Deck) ðŸ”¥\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck = [];\n      toast.info(\"ðŸ’€ ALL CARDS REMOVED ðŸ’€\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"removeCardFromGameDeck\",\n    value: function removeCardFromGameDeck(card, idx) {\n      // remove specific card based on the index of the card in the deck\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.splice(idx, 1);\n      toast.info(\"ðŸ’€ \" + card.name + \" removed from deck (\" + planechaseState.gameDeck.length + \" in Deck)\");\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      var planechaseState = this.state.planechaseState;\n\n      function shuffle(deck) {\n        for (var i = deck.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var _ref = [deck[j], deck[i]];\n          deck[i] = _ref[0];\n          deck[j] = _ref[1];\n        }\n\n        return deck;\n      }\n\n      if (planechaseState.gameDeck.length > 0) {\n        planechaseState.gameDeck = shuffle(planechaseState.gameDeck);\n        planechaseState.gameGoing = true;\n      } else {\n        toast.info(\"You need to add some cards first!\");\n      }\n\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"nextCard\",\n    value: function nextCard() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameDeck.push(planechaseState.gameDeck.shift());\n      planechaseState.currentCardIdx++;\n\n      function shuffle(deck) {\n        for (var i = deck.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var _ref2 = [deck[j], deck[i]];\n          deck[i] = _ref2[0];\n          deck[j] = _ref2[1];\n        }\n\n        return deck;\n      }\n\n      if (planechaseState.currentCardIdx === planechaseState.gameDeck.length) {\n        shuffle(planechaseState.gameDeck);\n        toast.info(\"Deck shuffled!\");\n        planechaseState.currentCardIdx = 1;\n      }\n\n      this.setState({\n        planechaseState: planechaseState\n      });\n    }\n  }, {\n    key: \"endGame\",\n    value: function endGame() {\n      var planechaseState = this.state.planechaseState;\n      planechaseState.gameGoing = false;\n      planechaseState.currentCardIdx = 1;\n      this.setState({\n        planechaseState: planechaseState\n      });\n    } // Battle Counter Functions \n\n  }, {\n    key: \"addPlayer\",\n    value: function addPlayer() {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players.push([20]);\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"removeAllPlayers\",\n    value: function removeAllPlayers() {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players = [];\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"addCounter\",\n    value: function addCounter(idx) {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players[idx].push(0);\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"plusOne\",\n    value: function plusOne(playerIdx, idx) {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players[playerIdx][idx]++;\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    }\n  }, {\n    key: \"minusOne\",\n    value: function minusOne(playerIdx, idx) {\n      var battleCounterState = this.state.battleCounterState;\n      battleCounterState.players[playerIdx][idx]--;\n      this.setState({\n        battleCounterState: battleCounterState\n      });\n    } // Set Search Functions\n\n  }, {\n    key: \"findAllSets\",\n    value: function findAllSets() {\n      var setSearchState = this.state.setSearchState,\n          self = this;\n\n      if (setSearchState.allSets.length === 0) {\n        axios.get(setSearchState.setSearchUrl).then(function (response) {\n          setSearchState.allSets = response.data.data;\n          self.setState({\n            setSearchState: setSearchState\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"selectSet\",\n    value: function selectSet(set) {\n      var setSearchState = this.state.setSearchState;\n      setSearchState.selectedSet = set;\n      this.setSearch();\n      this.setState({\n        setSearchState: setSearchState\n      });\n    }\n  }, {\n    key: \"setSearch\",\n    value: function setSearch(set) {\n      var setSearchState = this.state.setSearchState,\n          self = this;\n      axios.get(setSearchState.selectedSet.search_uri).then(function (response) {\n        setSearchState.setData = response.data.data;\n        self.setState({\n          setSearchState: setSearchState\n        });\n        console.log(setSearchState.setData);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var pages = [\"\", React.createElement(Home, {\n        changePage: this.changePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }), React.createElement(CardSearch, {\n        handleNewSearch: this.handleNewSearch,\n        handleSearchInputChange: this.handleSearchInputChange,\n        cardSearchState: this.state.cardSearchState,\n        toggleSearchModal: this.toggleSearchModal,\n        removeModal: this.removeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }), React.createElement(Planechase, {\n        planechaseState: this.state.planechaseState,\n        addToPlanechaseDeck: this.addToPlanechaseDeck,\n        addAll: this.addAll,\n        removeAll: this.removeAll,\n        removeCardFromGameDeck: this.removeCardFromGameDeck,\n        startGame: this.startGame,\n        nextCard: this.nextCard,\n        endGame: this.endGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }), React.createElement(BattleCounter, {\n        battleCounterState: this.state.battleCounterState,\n        addPlayer: this.addPlayer,\n        removeAllPlayers: this.removeAllPlayers,\n        addCounter: this.addCounter,\n        plusOne: this.plusOne,\n        minusOne: this.minusOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(SetSearch, {\n        setSearchState: this.state.setSearchState,\n        selectSet: this.selectSet,\n        setSearch: this.setSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick(event) {\n          return _this2.changePage(1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      })), this.findAllPlaneCards(), this.findAllSets(), React.createElement(ToastContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }), pages[this.state.pageView]);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Mario.Baez\\Documents\\code\\personal\\battlesphere\\src\\App.js"],"names":["React","Component","Button","Home","CardSearch","Planechase","BattleCounter","SetSearch","converText","axios","ToastContainer","toast","App","props","state","pageView","planechaseState","planeSearchUrl","allPlaneCards","gameDeck","currentCardIdx","gameGoing","cardSearchState","inputValueCardName","autocompleteUrl","fuzzyUrl","searchUrl","cardList","selectedCard","selectedMana","badSearch","modalState","battleCounterState","players","setSearchState","allSets","setSearchUrl","selectedSet","showSet","setData","changePage","bind","removeModal","toggleSearchModal","handleSearchInputChange","handleNewSearch","addAll","endGame","nextCard","removeAll","startGame","findAllPlaneCards","addToPlanechaseDeck","removeCardFromGameDeck","addPlayer","removeAllPlayers","addCounter","plusOne","minusOne","findAllSets","selectSet","setSearch","index","setState","event","target","value","self","length","split","join","get","then","response","searchData","data","success","forEach","card","image_uris","push","console","log","name","error","catch","preventDefault","mana_cost","idx","info","concat","splice","shuffle","deck","i","j","Math","floor","random","shift","playerIdx","set","search_uri","pages"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AAEA,OAAO,uCAAP;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;;IAEMC,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,CADC;AAEXC,MAAAA,eAAe,EAAE;AACfC,QAAAA,cAAc,EAAE,iDADD;AAEfC,QAAAA,aAAa,EAAE,EAFA;AAGfC,QAAAA,QAAQ,EAAE,EAHK;AAIfC,QAAAA,cAAc,EAAE,CAJD;AAKfC,QAAAA,SAAS,EAAE;AALI,OAFN;AAUXC,MAAAA,eAAe,EAAE;AACfC,QAAAA,kBAAkB,EAAE,EADL;AAEfC,QAAAA,eAAe,EAAE,gDAFF;AAGfC,QAAAA,QAAQ,EAAE,6CAHK;AAIfC,QAAAA,SAAS,EAAE,0CAJI;AAKfC,QAAAA,QAAQ,EAAE,EALK;AAMfC,QAAAA,YAAY,EAAE,EANC;AAOfC,QAAAA,YAAY,EAAE,EAPC;AAQfC,QAAAA,SAAS,EAAE,KARI;AASfC,QAAAA,UAAU,EAAE;AATG,OAVN;AAqBXC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,OAAO,EAAE;AADS,OArBT;AAyBXC,MAAAA,cAAc,EAAE;AACdC,QAAAA,OAAO,EAAE,EADK;AAEdC,QAAAA,YAAY,EAAE,+BAFA;AAGdC,QAAAA,WAAW,EAAE,EAHC;AAIdC,QAAAA,OAAO,EAAE,KAJK;AAKdC,QAAAA,OAAO,EAAE;AALK,OAzBL,CAkCb;;AAlCa,KAAb;AAmCA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB,CArCiB,CAsCjB;;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,uDAAnB;AACA,UAAKE,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBF,IAAvB,uDAAzB;AACA,UAAKG,uBAAL,GAA+B,MAAKA,uBAAL,CAA6BH,IAA7B,uDAA/B;AACA,UAAKI,eAAL,GAAuB,MAAKA,eAAL,CAAqBJ,IAArB,uDAAvB,CA1CiB,CA2CjB;;AACA,UAAKK,MAAL,GAAc,MAAKA,MAAL,CAAYL,IAAZ,uDAAd;AACA,UAAKM,OAAL,GAAe,MAAKA,OAAL,CAAaN,IAAb,uDAAf;AACA,UAAKO,QAAL,GAAgB,MAAKA,QAAL,CAAcP,IAAd,uDAAhB;AACA,UAAKQ,SAAL,GAAiB,MAAKA,SAAL,CAAeR,IAAf,uDAAjB;AACA,UAAKS,SAAL,GAAiB,MAAKA,SAAL,CAAeT,IAAf,uDAAjB;AACA,UAAKU,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBV,IAAvB,uDAAzB;AACA,UAAKW,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBX,IAAzB,uDAA3B;AACA,UAAKY,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BZ,IAA5B,uDAA9B,CAnDiB,CAoDjB;;AACA,UAAKa,SAAL,GAAiB,MAAKA,SAAL,CAAeb,IAAf,uDAAjB;AACA,UAAKc,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBd,IAAtB,uDAAxB;AACA,UAAKe,UAAL,GAAkB,MAAKA,UAAL,CAAgBf,IAAhB,uDAAlB;AACA,UAAKgB,OAAL,GAAe,MAAKA,OAAL,CAAahB,IAAb,uDAAf;AACA,UAAKiB,QAAL,GAAgB,MAAKA,QAAL,CAAcjB,IAAd,uDAAhB,CAzDiB,CA0DjB;;AACA,UAAKkB,WAAL,GAAmB,MAAKA,WAAL,CAAiBlB,IAAjB,uDAAnB;AACA,UAAKmB,SAAL,GAAiB,MAAKA,SAAL,CAAenB,IAAf,uDAAjB;AACA,UAAKoB,SAAL,GAAiB,MAAKA,SAAL,CAAepB,IAAf,uDAAjB;AA7DiB;AA8DlB,G,CAED;;;;;+BACWqB,K,EAAO;AAChB,WAAKC,QAAL,CAAc;AAAEhD,QAAAA,QAAQ,EAAE+C;AAAZ,OAAd;AACD,K,CACD;;;;4CACwBE,K,EAAO;AAC7B,UAAI1C,eAAe,GAAG,KAAKR,KAAL,CAAWQ,eAAjC;AACAA,MAAAA,eAAe,CAACC,kBAAhB,GAAqCyC,KAAK,CAACC,MAAN,CAAaC,KAAlD;AACA5C,MAAAA,eAAe,CAACQ,SAAhB,GAA4B,KAA5B;AACA,WAAKiC,QAAL,CAAc;AAAEzC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;oCACe0C,K,EAAO;AACrB,UAAI1C,eAAe,GAAG,KAAKR,KAAL,CAAWQ,eAAjC;AAAA,UACEI,SAAS,GAAGJ,eAAe,CAACI,SAD9B;AAAA,UAEEyC,IAAI,GAAG,IAFT;AAGA7C,MAAAA,eAAe,CAACK,QAAhB,GAA2B,EAA3B,CAJqB,CAKrB;;AACA,UAAIL,eAAe,CAACC,kBAAhB,CAAmC6C,MAAnC,GAA4C,CAAhD,EAAmD;AACjD;AACA1C,QAAAA,SAAS,GAAGA,SAAS,GAAGJ,eAAe,CAACC,kBAAhB,CAAmC8C,KAAnC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD,GAAnD,CAAxB,CAFiD,CAGjD;;AACA7D,QAAAA,KAAK,CAAC8D,GAAN,CAAU7C,SAAV,EACG8C,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,cAAIC,UAAU,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAA/B,CADwB,CAExB;;AACA,cAAID,UAAU,CAACN,MAAX,GAAoB,CAAxB,EAA2B;AACzBzD,YAAAA,KAAK,CAACiE,OAAN,CAAc,qBAAd;AACAF,YAAAA,UAAU,CAACG,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACzB,kBAAIA,IAAI,CAACC,UAAT,EAAqB;AACnBzD,gBAAAA,eAAe,CAACK,QAAhB,CAAyBqD,IAAzB,CAA8BF,IAA9B;AACAxD,gBAAAA,eAAe,CAACQ,SAAhB,GAA4B,KAA5B;AACAqC,gBAAAA,IAAI,CAACJ,QAAL,CAAc;AAAEzC,kBAAAA,eAAe,EAAEA;AAAnB,iBAAd;AACD,eAJD,MAIO;AACL2D,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,IAAL,GAAY,0CAAxB;AACD;AACF,aARD;AASD,WAXD,MAWO;AACLxE,YAAAA,KAAK,CAACyE,KAAN,CAAY,mBAAZ;AACA9D,YAAAA,eAAe,CAACK,QAAhB,GAA2B,EAA3B;AACAL,YAAAA,eAAe,CAACQ,SAAhB,GAA4B,IAA5B;AACAqC,YAAAA,IAAI,CAACJ,QAAL,CAAc;AAAEzC,cAAAA,eAAe,EAAEA;AAAnB,aAAd;AACA2D,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,SAtBH,EAwBGG,KAxBH,CAwBS,UAAUD,KAAV,EAAiB;AACtBH,UAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,SA1BH;AA2BD,OA/BD,MA+BO;AACLzE,QAAAA,KAAK,CAACyE,KAAN,CAAY,mBAAZ;AACD;;AACDpB,MAAAA,KAAK,CAACsB,cAAN;AACD;;;sCAEiBR,I,EAAM;AACtB,UAAIxD,eAAe,GAAG,KAAKR,KAAL,CAAWQ,eAAjC;AACAA,MAAAA,eAAe,CAACM,YAAhB,GAA+BkD,IAA/B;AACAxD,MAAAA,eAAe,CAACO,YAAhB,GAA+BrB,UAAU,CAACsE,IAAI,CAACS,SAAN,CAAzC;AACAjE,MAAAA,eAAe,CAACS,UAAhB,GAA6B,CAACT,eAAe,CAACS,UAA9C;AACA,WAAKgC,QAAL,CAAc;AAAEzC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;kCACa;AACZ,UAAIA,eAAe,GAAG,KAAKR,KAAL,CAAWQ,eAAjC;AACAA,MAAAA,eAAe,CAACM,YAAhB,GAA+B,EAA/B;AACAN,MAAAA,eAAe,CAACO,YAAhB,GAA+B,EAA/B;AACAP,MAAAA,eAAe,CAACS,UAAhB,GAA6B,CAACT,eAAe,CAACS,UAA9C;AACA,WAAKgC,QAAL,CAAc;AAAEzC,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,K,CACD;;;;sCACkBT,K,EAAO;AACvB,UAAIG,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AAAA,UACEmD,IAAI,GAAG,IADT;;AAEA,UAAInD,eAAe,CAACE,aAAhB,CAA8BkD,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C3D,QAAAA,KAAK,CAAC8D,GAAN,CAAUvD,eAAe,CAACC,cAA1B,EACGuD,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxBzD,UAAAA,eAAe,CAACE,aAAhB,GAAgCuD,QAAQ,CAACE,IAAT,CAAcA,IAA9C;AACAR,UAAAA,IAAI,CAACJ,QAAL,CAAc;AAAE/C,YAAAA,eAAe,EAAEA;AAAnB,WAAd;AACD,SAJH,EAKGqE,KALH,CAKS,UAAUD,KAAV,EAAiB;AACtBH,UAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,SAPH;AAQD;AAEF;;;wCACmBN,I,EAAMU,G,EAAK;AAC7B,UAAIxE,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyB6D,IAAzB,CAA8BF,IAA9B;AACAnE,MAAAA,KAAK,CAAC8E,IAAN,CAAW,QAAQX,IAAI,CAACK,IAAb,GAAoB,kBAApB,GAAyCnE,eAAe,CAACG,QAAhB,CAAyBiD,MAAlE,GAA2E,WAAtF;AACA,WAAKL,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;6BACQ;AACP,UAAIA,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,GAA2BH,eAAe,CAACG,QAAhB,CAAyBuE,MAAzB,CAAgC1E,eAAe,CAACE,aAAhD,CAA3B;AACAP,MAAAA,KAAK,CAAC8E,IAAN,CAAW,yBAAyBzE,eAAe,CAACG,QAAhB,CAAyBiD,MAAlD,GAA2D,cAAtE;AACA,WAAKL,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;gCACW;AACV,UAAIA,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,GAA2B,EAA3B;AACAR,MAAAA,KAAK,CAAC8E,IAAN,CAAW,yBAAX;AACA,WAAK1B,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD;;;2CACsB8D,I,EAAMU,G,EAAK;AAChC;AACA,UAAIxE,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyBwE,MAAzB,CAAgCH,GAAhC,EAAqC,CAArC;AACA7E,MAAAA,KAAK,CAAC8E,IAAN,CAAW,QAAQX,IAAI,CAACK,IAAb,GAAoB,sBAApB,GAA6CnE,eAAe,CAACG,QAAhB,CAAyBiD,MAAtE,GAA+E,WAA1F;AAEA,WAAKL,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAED;;;gCACW;AACV,UAAIA,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;;AACA,eAAS4E,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAK,IAAIC,CAAC,GAAGD,IAAI,CAACzB,MAAL,GAAc,CAA3B,EAA8B0B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,cAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AADwC,qBAEnB,CAACD,IAAI,CAACE,CAAD,CAAL,EAAUF,IAAI,CAACC,CAAD,CAAd,CAFmB;AAEvCD,UAAAA,IAAI,CAACC,CAAD,CAFmC;AAE9BD,UAAAA,IAAI,CAACE,CAAD,CAF0B;AAGzC;;AACD,eAAOF,IAAP;AACD;;AACD,UAAI7E,eAAe,CAACG,QAAhB,CAAyBiD,MAAzB,GAAkC,CAAtC,EAAyC;AACvCpD,QAAAA,eAAe,CAACG,QAAhB,GAA2ByE,OAAO,CAAC5E,eAAe,CAACG,QAAjB,CAAlC;AACAH,QAAAA,eAAe,CAACK,SAAhB,GAA4B,IAA5B;AACD,OAHD,MAGO;AACLV,QAAAA,KAAK,CAAC8E,IAAN,CAAW,mCAAX;AAED;;AACD,WAAK1B,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAED;;;+BACU;AACT,UAAIA,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACG,QAAhB,CAAyB6D,IAAzB,CAA8BhE,eAAe,CAACG,QAAhB,CAAyBgF,KAAzB,EAA9B;AACAnF,MAAAA,eAAe,CAACI,cAAhB;;AACA,eAASwE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAK,IAAIC,CAAC,GAAGD,IAAI,CAACzB,MAAL,GAAc,CAA3B,EAA8B0B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,cAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AADwC,sBAEnB,CAACD,IAAI,CAACE,CAAD,CAAL,EAAUF,IAAI,CAACC,CAAD,CAAd,CAFmB;AAEvCD,UAAAA,IAAI,CAACC,CAAD,CAFmC;AAE9BD,UAAAA,IAAI,CAACE,CAAD,CAF0B;AAGzC;;AACD,eAAOF,IAAP;AACD;;AACD,UAAI7E,eAAe,CAACI,cAAhB,KAAmCJ,eAAe,CAACG,QAAhB,CAAyBiD,MAAhE,EAAwE;AACtEwB,QAAAA,OAAO,CAAC5E,eAAe,CAACG,QAAjB,CAAP;AACAR,QAAAA,KAAK,CAAC8E,IAAN,CAAW,gBAAX;AAEAzE,QAAAA,eAAe,CAACI,cAAhB,GAAiC,CAAjC;AACD;;AACD,WAAK2C,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AAGD;;;8BACS;AACR,UAAIA,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAjC;AACAA,MAAAA,eAAe,CAACK,SAAhB,GAA4B,KAA5B;AACAL,MAAAA,eAAe,CAACI,cAAhB,GAAiC,CAAjC;AACA,WAAK2C,QAAL,CAAc;AAAE/C,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,K,CACD;;;;gCACY;AACV,UAAIgB,kBAAkB,GAAG,KAAKlB,KAAL,CAAWkB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2B+C,IAA3B,CAAgC,CAAC,EAAD,CAAhC;AACA,WAAKjB,QAAL,CAAc;AAAE/B,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AACD;;;uCACkB;AACjB,UAAIA,kBAAkB,GAAG,KAAKlB,KAAL,CAAWkB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,GAA6B,EAA7B;AACA,WAAK8B,QAAL,CAAc;AAAE/B,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AACD;;;+BACUwD,G,EAAK;AACd,UAAIxD,kBAAkB,GAAG,KAAKlB,KAAL,CAAWkB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2BuD,GAA3B,EAAgCR,IAAhC,CAAqC,CAArC;AACA,WAAKjB,QAAL,CAAc;AAAE/B,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AACD;;;4BACOoE,S,EAAWZ,G,EAAK;AACtB,UAAIxD,kBAAkB,GAAG,KAAKlB,KAAL,CAAWkB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2BmE,SAA3B,EAAsCZ,GAAtC;AACA,WAAKzB,QAAL,CAAc;AAAE/B,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AAED;;;6BACQoE,S,EAAWZ,G,EAAK;AACvB,UAAIxD,kBAAkB,GAAG,KAAKlB,KAAL,CAAWkB,kBAApC;AACAA,MAAAA,kBAAkB,CAACC,OAAnB,CAA2BmE,SAA3B,EAAsCZ,GAAtC;AACA,WAAKzB,QAAL,CAAc;AAAE/B,QAAAA,kBAAkB,EAAEA;AAAtB,OAAd;AAED,K,CACD;;;;kCACc;AACZ,UAAIE,cAAc,GAAG,KAAKpB,KAAL,CAAWoB,cAAhC;AAAA,UACEiC,IAAI,GAAG,IADT;;AAEA,UAAIjC,cAAc,CAACC,OAAf,CAAuBiC,MAAvB,KAAkC,CAAtC,EAAyC;AACvC3D,QAAAA,KAAK,CAAC8D,GAAN,CAAUrC,cAAc,CAACE,YAAzB,EACGoC,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxBvC,UAAAA,cAAc,CAACC,OAAf,GAAyBsC,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAR,UAAAA,IAAI,CAACJ,QAAL,CAAc;AAAE7B,YAAAA,cAAc,EAAEA;AAAlB,WAAd;AAED,SALH,EAMGmD,KANH,CAMS,UAAUD,KAAV,EAAiB;AACtBH,UAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,SARH;AASD;AAEF;;;8BACSiB,G,EAAK;AACb,UAAInE,cAAc,GAAG,KAAKpB,KAAL,CAAWoB,cAAhC;AACAA,MAAAA,cAAc,CAACG,WAAf,GAA6BgE,GAA7B;AACA,WAAKxC,SAAL;AACA,WAAKE,QAAL,CAAc;AAAE7B,QAAAA,cAAc,EAAEA;AAAlB,OAAd;AAED;;;8BACSmE,G,EAAK;AACb,UAAInE,cAAc,GAAG,KAAKpB,KAAL,CAAWoB,cAAhC;AAAA,UACEiC,IAAI,GAAG,IADT;AAEA1D,MAAAA,KAAK,CAAC8D,GAAN,CAAUrC,cAAc,CAACG,WAAf,CAA2BiE,UAArC,EACE9B,IADF,CACO,UAAUC,QAAV,EAAoB;AACvBvC,QAAAA,cAAc,CAACK,OAAf,GAAyBkC,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAR,QAAAA,IAAI,CAACJ,QAAL,CAAc;AAAE7B,UAAAA,cAAc,EAAEA;AAAlB,SAAd;AACA+C,QAAAA,OAAO,CAACC,GAAR,CAAYhD,cAAc,CAACK,OAA3B;AACD,OALH,EAMG8C,KANH,CAMS,UAAUD,KAAV,EAAiB;AACtBH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,OARH;AAUD;;;6BAEQ;AAAA;;AAEP,UAAImB,KAAK,GAAG,CACV,EADU,EAEV,oBAAC,IAAD;AAAM,QAAA,UAAU,EAAE,KAAK/D,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFU,EAGV,oBAAC,UAAD;AAAY,QAAA,eAAe,EAAE,KAAKK,eAAlC;AAAmD,QAAA,uBAAuB,EAAE,KAAKD,uBAAjF;AAA0G,QAAA,eAAe,EAAE,KAAK9B,KAAL,CAAWQ,eAAtI;AAAuJ,QAAA,iBAAiB,EAAE,KAAKqB,iBAA/K;AAAkM,QAAA,WAAW,EAAE,KAAKD,WAApN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHU,EAIV,oBAAC,UAAD;AAAY,QAAA,eAAe,EAAE,KAAK5B,KAAL,CAAWE,eAAxC;AAAyD,QAAA,mBAAmB,EAAE,KAAKoC,mBAAnF;AAAwG,QAAA,MAAM,EAAE,KAAKN,MAArH;AAA6H,QAAA,SAAS,EAAE,KAAKG,SAA7I;AAAwJ,QAAA,sBAAsB,EAAE,KAAKI,sBAArL;AAA6M,QAAA,SAAS,EAAE,KAAKH,SAA7N;AAAwO,QAAA,QAAQ,EAAE,KAAKF,QAAvP;AAAiQ,QAAA,OAAO,EAAE,KAAKD,OAA/Q;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJU,EAKV,oBAAC,aAAD;AAAe,QAAA,kBAAkB,EAAE,KAAKjC,KAAL,CAAWkB,kBAA9C;AAAkE,QAAA,SAAS,EAAE,KAAKsB,SAAlF;AAA6F,QAAA,gBAAgB,EAAE,KAAKC,gBAApH;AAAsI,QAAA,UAAU,EAAE,KAAKC,UAAvJ;AAAmK,QAAA,OAAO,EAAE,KAAKC,OAAjL;AAA0L,QAAA,QAAQ,EAAE,KAAKC,QAAzM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALU,EAMV,oBAAC,SAAD;AAAW,QAAA,cAAc,EAAE,KAAK5C,KAAL,CAAWoB,cAAtC;AAAsD,QAAA,SAAS,EAAE,KAAK0B,SAAtE;AAAiF,QAAA,SAAS,EAAE,KAAKC,SAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANU,CAAZ;AASA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,iBAAAG,KAAK;AAAA,iBAAI,MAAI,CAACxB,UAAL,CAAgB,CAAhB,CAAJ;AAAA,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIG,KAAKW,iBAAL,EAJH,EAKG,KAAKQ,WAAL,EALH,EAME,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOG4C,KAAK,CAAC,KAAKzF,KAAL,CAAWC,QAAZ,CAPR,CADF;AAWD;;;;EAxTed,S;;AA2TlB,eAAeW,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport Home from './pages/home';\nimport CardSearch from './pages/cardSearch';\nimport Planechase from './pages/planechase';\nimport BattleCounter from './pages/battleCounter';\nimport SetSearch from './pages/setSearch';\nimport converText from './utilities/symbolSwitch';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageView: 1,\n      planechaseState: {\n        planeSearchUrl: \"https://api.scryfall.com/cards/search?q=t=plane\",\n        allPlaneCards: [],\n        gameDeck: [],\n        currentCardIdx: 1,\n        gameGoing: false,\n\n      },\n      cardSearchState: {\n        inputValueCardName: '',\n        autocompleteUrl: 'https://api.scryfall.com/cards/autocomplete?q=',\n        fuzzyUrl: 'https://api.scryfall.com/cards/named?fuzzy=',\n        searchUrl: \"https://api.scryfall.com/cards/search?q=\",\n        cardList: [],\n        selectedCard: {},\n        selectedMana: [],\n        badSearch: false,\n        modalState: false,\n      },\n      battleCounterState: {\n        players: [],\n\n      },\n      setSearchState: {\n        allSets: [],\n        setSearchUrl: 'https://api.scryfall.com/sets',\n        selectedSet: {},\n        showSet: false,\n        setData: [],\n      }\n    }\n\n    // Home Page Functions\n    this.changePage = this.changePage.bind(this);\n    // Card Search Functions \n    this.removeModal = this.removeModal.bind(this);\n    this.toggleSearchModal = this.toggleSearchModal.bind(this);\n    this.handleSearchInputChange = this.handleSearchInputChange.bind(this);\n    this.handleNewSearch = this.handleNewSearch.bind(this)\n    // Planechase Functions\n    this.addAll = this.addAll.bind(this);\n    this.endGame = this.endGame.bind(this);\n    this.nextCard = this.nextCard.bind(this);\n    this.removeAll = this.removeAll.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.findAllPlaneCards = this.findAllPlaneCards.bind(this);\n    this.addToPlanechaseDeck = this.addToPlanechaseDeck.bind(this);\n    this.removeCardFromGameDeck = this.removeCardFromGameDeck.bind(this);\n    // Battle Counter Functions\n    this.addPlayer = this.addPlayer.bind(this);\n    this.removeAllPlayers = this.removeAllPlayers.bind(this);\n    this.addCounter = this.addCounter.bind(this);\n    this.plusOne = this.plusOne.bind(this);\n    this.minusOne = this.minusOne.bind(this);\n    // Set Search Functions\n    this.findAllSets = this.findAllSets.bind(this);\n    this.selectSet = this.selectSet.bind(this);\n    this.setSearch = this.setSearch.bind(this);\n  }\n\n  // Home Page Functions\n  changePage(index) {\n    this.setState({ pageView: index })\n  }\n  // Card Search Functions \n  handleSearchInputChange(event) {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.inputValueCardName = event.target.value;\n    cardSearchState.badSearch = false;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n  handleNewSearch(event) {\n    let cardSearchState = this.state.cardSearchState,\n      searchUrl = cardSearchState.searchUrl,\n      self = this;\n    cardSearchState.cardList = [];\n    // only search if there is a value in the search field\n    if (cardSearchState.inputValueCardName.length > 0) {\n      // create the search url\n      searchUrl = searchUrl + cardSearchState.inputValueCardName.split(' ').join('+');\n      // create axios request\n      axios.get(searchUrl)\n        .then(function (response) {\n          let searchData = response.data.data\n          // if the response ha something in it\n          if (searchData.length > 0) {\n            toast.success(\"ðŸ˜Ž Found something!\")\n            searchData.forEach(card => {\n              if (card.image_uris) {\n                cardSearchState.cardList.push(card)\n                cardSearchState.badSearch = false;\n                self.setState({ cardSearchState: cardSearchState })\n              } else {\n                console.log(card.name + \"ommited from results because of an error\")\n              }\n            })\n          } else {\n            toast.error(\"ðŸ˜­ Found nothing \")\n            cardSearchState.cardList = [];\n            cardSearchState.badSearch = true;\n            self.setState({ cardSearchState: cardSearchState })\n            console.log(\"No Similar Cards\")\n          }\n        }\n        )\n        .catch(function (error) {\n          console.log(error);\n        });\n    } else {\n      toast.error(\"ðŸ˜­ Found nothing \")\n    }\n    event.preventDefault()\n  }\n\n  toggleSearchModal(card) {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.selectedCard = card\n    cardSearchState.selectedMana = converText(card.mana_cost)\n    cardSearchState.modalState = !cardSearchState.modalState;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n  removeModal() {\n    let cardSearchState = this.state.cardSearchState;\n    cardSearchState.selectedCard = {};\n    cardSearchState.selectedMana = [];\n    cardSearchState.modalState = !cardSearchState.modalState;\n    this.setState({ cardSearchState: cardSearchState });\n  }\n  // Planchase Functions\n  findAllPlaneCards(props) {\n    let planechaseState = this.state.planechaseState,\n      self = this;\n    if (planechaseState.allPlaneCards.length === 0) {\n      axios.get(planechaseState.planeSearchUrl)\n        .then(function (response) {\n          planechaseState.allPlaneCards = response.data.data\n          self.setState({ planechaseState: planechaseState })\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n  }\n  addToPlanechaseDeck(card, idx) {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.push(card)\n    toast.info(\"ðŸ‘Œ \" + card.name + \" added to deck (\" + planechaseState.gameDeck.length + \" in Deck)\")\n    this.setState({ planechaseState: planechaseState })\n  }\n  addAll() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck = planechaseState.gameDeck.concat(planechaseState.allPlaneCards)\n    toast.info(\"ðŸ”¥ ALL CARDS ADDED (\" + planechaseState.gameDeck.length + \" in Deck) ðŸ”¥\")\n    this.setState({ planechaseState: planechaseState })\n  }\n  removeAll() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck = [];\n    toast.info(\"ðŸ’€ ALL CARDS REMOVED ðŸ’€\");\n    this.setState({ planechaseState: planechaseState })\n  }\n  removeCardFromGameDeck(card, idx) {\n    // remove specific card based on the index of the card in the deck\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.splice(idx, 1)\n    toast.info(\"ðŸ’€ \" + card.name + \" removed from deck (\" + planechaseState.gameDeck.length + \" in Deck)\")\n\n    this.setState({ planechaseState: planechaseState })\n\n  }\n  startGame() {\n    let planechaseState = this.state.planechaseState;\n    function shuffle(deck) {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    }\n    if (planechaseState.gameDeck.length > 0) {\n      planechaseState.gameDeck = shuffle(planechaseState.gameDeck);\n      planechaseState.gameGoing = true;\n    } else {\n      toast.info(\"You need to add some cards first!\")\n\n    }\n    this.setState({ planechaseState: planechaseState })\n\n  }\n  nextCard() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameDeck.push(planechaseState.gameDeck.shift());\n    planechaseState.currentCardIdx++;\n    function shuffle(deck) {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    }\n    if (planechaseState.currentCardIdx === planechaseState.gameDeck.length) {\n      shuffle(planechaseState.gameDeck);\n      toast.info(\"Deck shuffled!\")\n\n      planechaseState.currentCardIdx = 1;\n    }\n    this.setState({ planechaseState: planechaseState });\n\n\n  }\n  endGame() {\n    let planechaseState = this.state.planechaseState;\n    planechaseState.gameGoing = false;\n    planechaseState.currentCardIdx = 1;\n    this.setState({ planechaseState: planechaseState });\n  }\n  // Battle Counter Functions \n  addPlayer() {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players.push([20])\n    this.setState({ battleCounterState: battleCounterState })\n  }\n  removeAllPlayers() {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players = [];\n    this.setState({ battleCounterState: battleCounterState })\n  }\n  addCounter(idx) {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players[idx].push(0)\n    this.setState({ battleCounterState: battleCounterState })\n  }\n  plusOne(playerIdx, idx) {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players[playerIdx][idx]++;\n    this.setState({ battleCounterState: battleCounterState })\n\n  }\n  minusOne(playerIdx, idx) {\n    let battleCounterState = this.state.battleCounterState;\n    battleCounterState.players[playerIdx][idx]--;\n    this.setState({ battleCounterState: battleCounterState })\n\n  }\n  // Set Search Functions\n  findAllSets() {\n    let setSearchState = this.state.setSearchState,\n      self = this;\n    if (setSearchState.allSets.length === 0) {\n      axios.get(setSearchState.setSearchUrl)\n        .then(function (response) {\n          setSearchState.allSets = response.data.data\n          self.setState({ setSearchState: setSearchState })\n\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n  }\n  selectSet(set) {\n    let setSearchState = this.state.setSearchState;\n    setSearchState.selectedSet = set;\n    this.setSearch()\n    this.setState({ setSearchState: setSearchState });\n\n  }\n  setSearch(set) {\n    let setSearchState = this.state.setSearchState,\n      self = this;\n    axios.get(setSearchState.selectedSet.search_uri).\n      then(function (response) {\n        setSearchState.setData = response.data.data;\n        self.setState({ setSearchState: setSearchState });\n        console.log(setSearchState.setData)\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n  }\n\n  render() {\n\n    let pages = [\n      \"\",\n      <Home changePage={this.changePage} />,\n      <CardSearch handleNewSearch={this.handleNewSearch} handleSearchInputChange={this.handleSearchInputChange} cardSearchState={this.state.cardSearchState} toggleSearchModal={this.toggleSearchModal} removeModal={this.removeModal} />,\n      <Planechase planechaseState={this.state.planechaseState} addToPlanechaseDeck={this.addToPlanechaseDeck} addAll={this.addAll} removeAll={this.removeAll} removeCardFromGameDeck={this.removeCardFromGameDeck} startGame={this.startGame} nextCard={this.nextCard} endGame={this.endGame} />,\n      <BattleCounter battleCounterState={this.state.battleCounterState} addPlayer={this.addPlayer} removeAllPlayers={this.removeAllPlayers} addCounter={this.addCounter} plusOne={this.plusOne} minusOne={this.minusOne} />,\n      <SetSearch setSearchState={this.state.setSearchState} selectSet={this.selectSet} setSearch={this.setSearch} />\n    ]\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Button onClick={event => this.changePage(1)} />\n        </header>\n        {this.findAllPlaneCards()}\n        {this.findAllSets()}\n        <ToastContainer />\n        {pages[this.state.pageView]}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}